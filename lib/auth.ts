import { supabase } from './supabase'
import type { Usuario, AuthResponse } from '@/types/auth'

const ADMIN_PASSWORD = process.env.NEXT_PUBLIC_ADMIN_PASSWORD || 'admin123'

/**
 * Autentica um usu√°rio usando matr√≠cula e senha
 */
export async function authenticateUser(matricula: string, senha: string): Promise<AuthResponse> {
  try {
    console.log('üîç Iniciando autentica√ß√£o para matr√≠cula:', matricula)
    
    // Verificar se a senha est√° correta
    if (senha !== ADMIN_PASSWORD) {
      console.log('‚ùå Senha incorreta')
      return {
        success: false,
        error: 'Senha incorreta'
      }
    }

    // Converter matr√≠cula para n√∫mero (j√° que no banco √© bigint)
    const matriculaNumber = parseInt(matricula, 10)
    
    if (isNaN(matriculaNumber)) {
      console.log('‚ùå Matr√≠cula n√£o √© um n√∫mero v√°lido:', matricula)
      return {
        success: false,
        error: 'Matr√≠cula deve ser um n√∫mero v√°lido'
      }
    }

    console.log('üî¢ Matr√≠cula convertida para n√∫mero:', matriculaNumber)

    // Buscar usu√°rio na tabela matriculas
    console.log('üîç Executando consulta no Supabase...')
    const { data, error, count } = await supabase
      .from('matriculas')
      .select('*', { count: 'exact' })
      .eq('matricula', matriculaNumber)

    console.log('üìä Resultado da consulta:', { data, error, count })

    if (error) {
      console.error('‚ùå Erro do Supabase:', error)
      return {
        success: false,
        error: `Erro na consulta: ${error.message}`
      }
    }

    // Verificar se retornou dados
    if (!data || data.length === 0) {
      console.log('‚ùå Nenhum resultado encontrado para matr√≠cula:', matriculaNumber)
      
      // Fazer uma busca mais ampla para debug
      console.log('üîç Fazendo busca de debug...')
      const { data: debugData } = await supabase
        .from('matriculas')
        .select('matricula')
        .limit(5)
      
      console.log('üìã Primeiras 5 matr√≠culas no banco:', debugData)
      
      return {
        success: false,
        error: 'Matr√≠cula n√£o encontrada'
      }
    }

    const usuario = data[0]
    console.log('üë§ Usu√°rio encontrado:', usuario)

    // Verificar se o usu√°rio tem fun√ß√£o de LIDER
    if (usuario.funcao !== 'LIDER') {
      console.log('‚ùå Usu√°rio n√£o √© LIDER:', usuario.funcao)
      return {
        success: false,
        error: 'Acesso negado. Apenas l√≠deres podem acessar o sistema.'
      }
    }

    // Mapear dados para o tipo Usuario
    const usuarioFormatado: Usuario = {
      matricula: usuario.matricula.toString(),
      nome: usuario.nome,
      turno: usuario.turno,
      funcao: usuario.funcao
    }

    console.log('‚úÖ Autentica√ß√£o bem-sucedida:', usuarioFormatado)

    return {
      success: true,
      usuario: usuarioFormatado
    }
  } catch (error) {
    console.error('üí• Erro na autentica√ß√£o:', error)
    return {
      success: false,
      error: 'Erro interno do servidor. Tente novamente.'
    }
  }
}